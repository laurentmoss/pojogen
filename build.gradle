import groovy.xml.MarkupBuilder;
import org.apache.tools.ant.filters.ReplaceTokens;

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'osgi'

repositories {
	mavenCentral()
}

configurations {
	eclipseCompile
	compile {
		extendsFrom eclipseCompile
	}
}

dependencies {
	compile 'com.google.guava:guava:14.0.1'
	compile 'org.apache.commons:commons-lang3:3.1'
	
	eclipseCompile 'org.eclipse.tycho:org.eclipse.jdt.core:3.9.0.v20130313-2254'
	eclipseCompile 'org.eclipse.equinox:org.eclipse.equinox.common:3.6.0.v20100503'
	eclipseCompile('org.eclipse:text:3.3.0-v20070606-0010') {
		transitive = false
	}
	eclipseCompile('org.eclipse.jface:text:3.3.0-v20070606-0010') {
		transitive = false
	}
	eclipseCompile 'org.eclipse.core:org.eclipse.core.resources:3.6.0.v20100526-0737'
	
	testCompile('com.google.testing.compile:compile-testing:0.5')
	testCompile 'junit:junit:4.11'
	testCompile files("${System.properties['java.home']}/../lib/tools.jar") // for javax.tools on Linux
}

// Support for expected sources with file: URLs is clumsy in compile-testing 0.5:
// https://github.com/google/compile-testing/issues/39
//
// Package expected sources in JAR to use jar: URLs instead.
task testJar(type: Jar) {
	from sourceSets.test.resources.srcDir {
		include '**/*.java'
	}
	destinationDir = buildDir
	archiveName = 'test.jar'
}

test.dependsOn testJar

test {
	systemProperty 'test.jar', testJar.archivePath
}

eclipse {
	jdt {
		file {
			withProperties { properties ->
				properties.setProperty("org.eclipse.jdt.core.formatter.lineSplit", "140")
			}
		}
	}

    project {
		buildCommand 'org.eclipse.ui.externaltools.ExternalToolBuilder', LaunchConfigHandle: '<project>/.externalToolBuilders/gradleJar.launch'
    }
}

task copyEclipseSettings(type: Copy) {
	from "$projectDir/src/main/eclipse"
	filter(ReplaceTokens, tokens: [GRADLE_ROOTDIR: rootDir.toString()]);
	into projectDir
}

eclipseJdt.dependsOn copyEclipseSettings
eclipseProject.dependsOn copyEclipseSettings

String dependencyDir = 'build/dependency/main'

task copyDependencies(type: Sync) {
	from(configurations.compile - configurations.eclipseCompile)
	into dependencyDir
}

String pluginManifestMF = "$buildDir/plugin/META-INF/MANIFEST.MF";
task osgiManifest(dependsOn: [classes, copyDependencies]) {
	doLast {
		FileCollection bundleClasspath = fileTree(dir: dependencyDir)
		Manifest manifest = osgiManifest {
			classesDir = sourceSets.main.output.classesDir
			classpath = bundleClasspath
			name = 'PojoGen Plug-in'
			symbolicName = 'com.pojogen;singleton:=true'
			version = '0.0.1'
			instruction 'Bundle-ClassPath', '.,'+bundleClasspath.files.collect{file -> file.name}.join(',')
			instruction 'Require-Bundle', 'org.eclipse.core.runtime, org.eclipse.jdt.apt.core, org.eclipse.jdt.core, org.eclipse.text'
			instruction 'Embed-Dependency', '*;scope=compile|runtime'
			instruction 'Embed-Transitive', 'true'
			instruction 'Embed-StripGroup', 'true'
			instruction 'Export-Package', 'com.pojogen.api.apt'
			instruction '-removeheaders', 'Import-Package, Private-Package'
			instruction '-nouses', 'true'
		};
		manifest.writeTo(pluginManifestMF)
	}
}

task pluginXml() {
	doLast {
		file("$sourceSets.main.output.resourcesDir/plugin.xml").withWriter { writer ->
			def xml = new MarkupBuilder(writer)
			xml.setDoubleQuotes(true)
			xml.plugin() {
				extension(point: 'org.eclipse.jdt.apt.core.annotationProcessorFactory') {
					java6processors(enableDefault: true) {
						java6processor('class': 'com.pojogen.api.apt.PojoGenAnnotationProcessor')
					}
				}
			}
		}
	}
}

task pluginJar(dependsOn: [classes, copyDependencies, osgiManifest, pluginXml], type: Jar) {
	from(sourceSets.main.output.classesDir)
	from(sourceSets.main.output.resourcesDir)
	from(dependencyDir)
	destinationDir = jar.destinationDir
	archiveName = 'com.pojogen_0.0.1.jar'
	manifest.from(pluginManifestMF)
}
